// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusType {
  Pending
  Processing
  Delivered
}

enum PaymentStatus {
  Pending
  Paid
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]

  @@map("roles")
}

model User {
  id         Int      @id @default(autoincrement())
  role_id    Int
  name       String
  email      String   @unique @db.VarChar(191)
  mobile     String   @unique @db.VarChar(15)
  address    String?  @db.VarChar(191)
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role     Role      @relation(fields: [role_id], references: [id], onDelete: Cascade)
  products Product[]
  orders   Order[]
  carts    Cart[]
  payments Payment[]

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String
  price       Float
  stock       Int
  category_id Int
  user_id     Int
  image_url   String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [category_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]
  cart_items  CartItem[]

  @@map("products")
}

model Order {
  id           Int        @id @default(autoincrement())
  user_id      Int
  payment_id Int
  total_amount Decimal    @db.Decimal(10, 2)
  status       StatusType @default(Pending)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  order_items OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  order_id   Int
  product_id Int
  quantity   Int?
  price      Decimal? @db.Decimal(10, 2)

  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@id([order_id, product_id])
  @@map("order_items")
}

model Cart {
  id         Int      @id @default(autoincrement())
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cart_items CartItem[]
  payment Payment[]

  @@map("carts")
}

model CartItem {
  cart_id    Int
  product_id Int
  quantity   Int?
  price      Decimal? @db.Decimal(10, 2)

  carts    Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  products Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@id([cart_id, product_id])
  @@map("cart_items")
}

model Payment {
  id             Int           @id @default(autoincrement())
  user_id Int
  cart_id Int
  payment_type   String
  payment_status PaymentStatus @default(Pending)
  transaction_id String?
  amount         Decimal       @db.Decimal(10, 2)
  created_at     DateTime      @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cart Cart @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  order Order[]

  @@map("payments")
}
